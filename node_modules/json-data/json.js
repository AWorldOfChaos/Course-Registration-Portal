var fs = require("fs");
/**
 *
 * @todo: All file/dir paths require a trailing slash.
 * @todo: Required/optional params, checking if undefined.
 *
 */
function JSONClass() {
    var that = this;


    /**
     * Synchronously reads and parses a JSON file.
     *
     * @param {string} filePath - path to JSON file.
     * @returns {JSON} - JSON array.
     */
    that.require = function (filePath) {
        if (filePath == undefined) throw "You must include a file path.";

        if (typeof filePath == "string") {
            return JSON.parse(fs.readFileSync(filePath, 'utf8'));
        } else {
            throw "Please specify the path to a JSON file in a string."
        }
    };
    /**
     * Checks if data is required, if not, it requires the data and returns it.
     *
     * @param {JSON} data - JSON array or string path to JSON file.
     * @returns {*}
     */
    that.checkIfDataIsRequired = function (data) {
        if (data == undefined) throw "No data specified. Data must be file path (string) or JSON array.";

        /* Data isn't processed (assuming string file path): */
        if (typeof data == "string") {
            return that.require(data);
        /* Data is already required (in JSON array): */
        } else if (Array.isArray(data)) { return data; }
    };
    /**
     * Loop through a given JSON file (or file path in string), calling the function param every iteration.
     *
     * @param {JSON} data - Can be a string (path to JSON file) or an array of objects (JSON array).
     * @param {function} loopFunc - Function to be called every JSON loop iteration.
     */
    that.loop = function (data, loopFunc) {
        if (data == undefined) throw "No data specified. Data must be file path (string) or JSON array.";
        if (loopFunc == undefined) throw "No function specified. This function is run on every loop iteration.";
        var json = that.checkIfDataIsRequired(data);

        // Loop through each object in the JSON, calling the passed in function:
        for (var nodeI = 0; nodeI < json.length; nodeI++) {
            /**
            * @param {number} nodeI - current object loop iteration.
            * @param {object} data[nodeI] - current object in loop iteration.
            */
            loopFunc(nodeI, json[nodeI]);
        }
    };
    /**
     * Loop through a directory of JSON files, calling the function param upon each iteration.
     *
     * @param {string} dirPath - directory path of JSON files.
     * @param {function} loopFunc - function to call on each loop iteration.
     */
    that.loopThroughDir = function (dirPath, loopFunc) {
        if (dirPath == undefined) throw "Please provide a directory path as a string.";
        if (loopFunc == undefined) throw "Please provide a function to call each loop iteration.";

        var fileList = fs.readdirSync(dirPath);

        for (var fileI = 0; fileI < fileList.length; fileI++) {
            var filePath = dirPath + fileList[fileI];
            /**
             * @param {number} fileI - loop iterator.
             * @param {string} filePath - path to the current file iteration.
             */
            loopFunc(fileI, filePath);
        }
    };
    /**
     * Truncates and adds a given JSON array to a JSON file.
     *
     * @param {JSON} data - JSON file to be replaced (with newData).
     * @param {JSON} newData - JSON array to replace the old file with.
     */
    that.replace = function (data, newData) {
        if (data == undefined) throw "Please include in JSON.";
        if (newData == undefined) throw "Please include new data.";
        var json = that.checkIfDataIsRequired(data);

        fs.truncateSync(json);
        fs.writeFileSync(filePath, JSON.stringify(newData, null, 4));
    };
    /**
     * Removes all files in a given directory, optionally keeping a specified file.
     *
     * @param {string} dirPath - path to directory to empty.
     * @param {string} keepThisFile - file you don't want removed (optional).
     */
    that.emptyDir = function (dirPath, keepThisFile) {
        if (dirPath == undefined) throw "Please specify a directory path (including trailing slash).";

        try {
            var fileList = fs.readdirSync(dirPath);

            /* Loop through files in dirPath: */
            for (var fileI = 0; fileI < fileList.length; fileI++) {(function(){
                var filePath = dirPath + fileList[fileI];

                /* Remove the file if it's not keepThisFile: */
                if (fs.existsSync(keepThisFile)) {
                    if (filePath != keepThisFile) {
                        // If filePath is a file, remove it.
                        if (fs.lstatSync(filePath).isFile()) {
                            if (fs.existsSync(filePath)) fs.unlinkSync(filePath);
                        // If filePath is a directory, loop through it:
                        } else if (fs.lstatSync(filePath).isDirectory()) {
                            var filesToDelete = fs.readdirSync(filePath);

                            // Loop through all files in the directory.
                            for (var dirFileI = 0; dirFileI < filesToDelete.length; dirFileI++) {
                                var dirFilePath = filePath + "/" + filesToDelete[dirFileI];
                                if (fs.existsSync(dirFilePath)) fs.unlinkSync(dirFilePath);
                            }
                            fs.rmdirSync(filePath);
                        }
                    }
                }
            })();}
        } catch(err) { if (err) console.log("Caught: " + err); }
    };
}




var json = new JSONClass();
module.exports = json;
